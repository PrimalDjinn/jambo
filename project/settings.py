"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import environ
from os.path import join

from utils.env import get_redis_url, get_redis_password, get_env

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

environ.Env.read_env(join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# This will be set automagically
SECRET_KEY = get_env(env, "SECRET_KEY", None, True)

DEBUG = get_env(env.bool, "DEBUG", False)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'api.apps.ApiConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DB_OBJECT = get_env(env.db_url, "DATABASE_URI", required=True)
DB_ENV = get_env(env.str, "DB_ENV", None)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': DB_OBJECT['NAME'],
        'USER': DB_OBJECT['USER'] or 'postgres',
        'PASSWORD': DB_OBJECT['PASSWORD'] or '',
        'HOST': "db" if DB_ENV == "docker" else DB_OBJECT['HOST'],
        'PORT': DB_OBJECT['PORT']
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    #     "DEFAULT_RENDERER_CLASSES": [
    #         "rest_framework.renderers.JSONRenderer",
    #     ]
}

ALLOWED_HOSTS = get_env(env.list, "ALLOWED_HOSTS", "*")

CSRF_TRUSTED_ORIGINS = get_env(env.list, "CSRF_TRUSTED_ORIGINS", [])
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = get_env(env.list, "CORS_ORIGIN_WHITELIST", [])

REDIS_URL = get_redis_url(env)

REDIS_PASSWORD = get_redis_password(env)

if REDIS_URL:
    CACHES = {
        'default': {
            "BACKEND": "django_redis.cache.RedisCache",
            "LOCATION": REDIS_URL,
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
                "PASSWORD": REDIS_PASSWORD
            }
        }
    }

DJANGO_REDIS_IGNORE_EXCEPTIONS = True
DJANGO_REDIS_LOG_IGNORED_EXCEPTIONS = True

EMAIL_USE_TLS = get_env(env.bool, "MAIL_USE_TLS", True)
EMAIL_HOST = get_env(env.str, "MAIL_SERVER", "smtp.gmail.com")
EMAIL_PORT = get_env(env, "MAIL_PORT", 587)
EMAIL_HOST_USER = get_env(env.str, "MAIL_USER", None)
EMAIL_HOST_PASSWORD = get_env(env.str, "MAIL_PASSWORD", None)

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
